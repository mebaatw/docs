p {display: inline;}
em {display: block;}

<style type="text/css">
@import url(styles.css); /* @import comes first */
@import url(sheet2.css) all;
@import url(blueworld.css) screen;
@import url(zany.css) projection, print;

h1 {color: gray;}
</style>

Elements
	- most common: p, table, span, a, and div
	- two forms: replaced (img, input) and nonreplaced.
	- display types: 
		- block-level: 
				- generates “breaks” before and after the element box 
				-  p and div ; List items 
		- inline-level: These elements do not generate a “break” before or after themselves, so they can appear within the content of another element without disrupting its display.
			- a element; strong and em
		- in HTML block-level elements cannot descend from inline-level elements
		- CSS, on the other hand, has no such restrictions. You can leave the markup as it is but change the display roles of the two elements like this:
			p {display: inline;}
			em {display: block;}
			this is not legal in HTML
		
Associate CSS with a document:
				- link tag
					- <link rel="stylesheet" type="text/css" href="sheet1.css" media="all">
					- link must be placed inside the head element but may not be placed inside any other element. 
					- only those link tags with a rel of stylesheet will be used in the initial display of the document
					- alternate stylesheets
				- @import declaration 
					- see above
					- Imports must be placed at the beginning of the stylesheet that contains them, but they are otherwise unconstrained.
					- @import can be highly useful if you have an external stylesheet that needs to use the styles found in other external stylesheets. 
					
Stylesheet Contents:
	- Rule Structure:
		h1 {color: red; background: yellow;}
		- Each rule has two fundamental parts: the selector (h1) and the declaration block (contained within --> {}). 
		- The declaration block is composed of one or more declarations ( separated by -> ;), 
		- Each declaration is a pairing of a property (color, background) and a value (red,yellow).
	- /* This is a CSS1 comment */	
		
Media Queries	
	- Media queries can be employed in the following places:
		- The media attribute of a link element
		- The media attribute of a style element
		- The media descriptor portion of an @import declaration
		- The media descriptor portion of an @media declaration	
	- types:
		- all: Use in all presentational media.
		- print: Use when printing the document for sighted users and also when displaying a print preview of the document.
		- screen: Use when presenting the document in a screen medium like a desktop computer monitor. 

Selectors
	- Elements of the document serve as the most basic selectors. 
		- In XML, a selector could be anything, since XML allows for the creation of new markup languages that can have just about anything as an element name
		- In an HTML document, on the other hand, the selector will generally be one of the many HTML elements such as p, h3, em, a, or even html itself.
		- For example:
			html {color: black;}
			h1 {color: gray;}
			h2 {color: silver;}
	- Grouping
		- Apply the same style to multiple elements
		- h2, p {color: gray;}
		- The comma tells the browser that there are two different selectors involved in the rule. Leaving out the comma would give the rule a different meaning
	- universal selector
		- *
		- wildcard matches any element
		- for example:  make every single element in a document red --> * {color: red;}
	- Grouping Declarations
		- h1 {font: 18px Helvetica; color: purple; background: aqua;}
	- New Elements in Old Browsers: --> document.createElement('main');	
	- Class Selectors
		- class selector reference is always preceded by a period (.)
		- .warning {font-weight: bold;}
		- <p class="warning">When handling plutonium, care must be taken to avoidthe formation of a critical mass.</p>
		- class selector can be combined:
			- p.warning {font-weight: bold;}
			- selector matches any p elements that have a class attribute containing the word warning
			- the warning paragraph is boldfaced
			- p.warning.help {background: red;} --> p elements with a class containing the words warning and help; both not just one 
			- You may assign classes to any number of elements,
	- ID Selectors	
		- ID selectors are preceded by an octothorpe (#)
		- refer to values found in id attributes
		- IDs, on the other hand, should be used once, and only once, within an HTML document
		- ID selectors can’t be combined with other IDs
		- IDs carry more weight then class
	- Attribute Selectors
		- CSS2 introduced attribute selectors, which can be used to select elements based on their attributes and the values of those attributes.
		- There are four general types of attribute selectors:
			- Simple Attribute Selectors
				- select elements that have a certain attribute, regardless of that attribute’s value
				- h1[class] {color: silver;} --> select all h1 elements that have a class attribute with any value and make their text silver
				- It is also possible to select based on the presence of more than one attribute. You do this by chaining the attribute selectors together. : a[href][title] {font-weight: bold;}
			- Selection Based on Exact Attribute Value:
				- You can further narrow the selection process to encompass only those elements whose attributes are a certain value.
				- a[href="http://www.css-discuss.org/about.html"] {font-weight: bold;}
				-  you can chain together multiple attribute-value selectors to select a single document
				- a[href="http://www.w3.org/"][title="W3C Home"] {font-size: 200%;}
				- there is a subtle but crucial difference between h1#page-title and h1[id="page-title"].
			- Selection Based on Partial Attribute Values:
				- see 2SelectorSubstringMatching.png
				- A Particular Attribute Selection Type:
					- *[lang|="en"] {color: white;}
					- This rule will select any element whose lang attribute is equal to en or begins with en-
				- MATCHING ONE WORD IN A SPACE-SEPARATED LIST:
					- p[class~="warning"] {font-weight: bold;}
				- Matching a substring within an attribute value:
					- use the form [att*="val"] to match substrings
					- span[class*="cloud"] {font-style: italic;}
					- matches any span element whose class attribute contains the substring cloud
				- Matching a substring at the beginning of an attribute value	
					- [att^="val"]
					- a[href^="https:"] {font-weight: bold;}
				- Matching a substring at the end of an attribute value	
					- [att$="val"] 
					- a[href$=".pdf"] {font-weight: bold;}
			- The Case Insensitivity Identifier
				- a[href$='.PDF' i]
				- i means the selector will match any a element whose href attribute’s value ends in .pdf, regardless of the capitalization of the letters P, D, and F.
	- Using Document Structure
		- Understanding the Parent-Child Relationship
			- see document tree struvture png
		- Descendant Selectors:
			- Defining descendant selectors is the act of creating rules that operate in certain structural circumstances but not others
			- h1 em {color: gray;} -> This rule will make gray any text in an em element that is the descendant of an h1 element.
			- the selector side of a rule is composed of two or more space-separated selectors
			- blockquote b, p b {color: gray;} --> you want gray to be the text color of any b (boldface) element that is part of a blockquote and for any bold text that is found in a normal paragraph
			-  the degree of separation between two elements can be practically infinite
		- Selecting Children:
			- select an element that is a direct child of another element
			- h1 > strong {color: red;}
			- table.summary td > p will select any p element that is a child of a td element that is itself descended from a table element that has a class attribute containing the word summary.
		- Selecting Adjacent Sibling Elements:
			- select an element that immediately follows another element with the same parent
			- h1 + p {margin-top: 0;}
		- Selecting Following Siblings	
			- select any element that follows another element when both elements share the same parent
			- As an example, to italicize any ol that follows an h2 and also shares a parent with the h2, you’d write h2 ~ol {font-style: italic;}
	- Pseudo-Class Selectors	
		- All pseudo-classes, without exception, are a word preceded by a single colon (:), and they can appear anywhere in a selector.
		- pseudo-classes always refer to the element to which they’re attached, and no other. 
		- Selecting the root element
			- the pseudo-class :root selects the root element of the document.
			- :root {border: 10px dotted gray;}
		- Selecting empty elements:
			- :empty
			- select any element that has no children of any kind, including text nodes
			- p:empty {display: none;} would prevent the display of any empty paragraphs.
			- empty—no whitespace, visible content, or descendant elements
			- comments are not considered content
			- *:empty {display: none;}
		- Selecting unique children:
			- :only-child
			- It selects elements when they are the only child element of another element
			- img:only-child {border: 1px solid black;} --> add a border to any image that’s the only child of another element
			- a[href] img:only-child {border: 2px solid black;} -> images that are sole children and found inside hyperlinks
			- :only-of-type will match any element that is the only of its type among all its siblings
		- Selecting first and last children:
			- 